name: Deploy to Production

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      COMPOSE_FILE: docker-compose.prod.yml

    steps:
      - name: Checkout infra repo
        uses: actions/checkout@v4

      - name: Copy compose file to server
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: "docker-compose.prod.yml"
          target: ${{ vars.SSH_TARGET }}

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd ${{ vars.SSH_TARGET }}
            echo "${{ secrets.FRONTEND_ENV }}" > .frontend.env
            echo "${{ secrets.BACKEND_ENV }}" > .backend.env
            echo "${{ secrets.DB_ENV }}" > .db.env
            echo "${{ secrets.TELEGRAM_BOT_ENV }}" > .telegram-bot.env
            docker compose -f ${{ vars.SSH_TARGET }}/docker-compose.prod.yml -p purple pull
            docker compose -f ${{ vars.SSH_TARGET }}/docker-compose.prod.yml -p purple down
            docker compose -f ${{ vars.SSH_TARGET }}/docker-compose.prod.yml -p purple up -d
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}